import './styles.css';
import { useState } from 'react';

export default function JavaScriptPage() {
  const [expandedElement, setExpandedElement] = useState(null);

  const elements = [
    { element: "Variables", description: "Armazenam dados. Usamos 'let', 'const' e 'var' para definir vari√°veis. 'let' permite declarar vari√°veis com escopo de bloco, ou seja, elas est√£o restritas ao bloco de c√≥digo em que s√£o definidas. 'const' tamb√©m possui escopo de bloco, mas a vari√°vel declarada com 'const' n√£o pode ser reatribu√≠da ap√≥s a sua inicializa√ß√£o, tornando-a imut√°vel. 'var', por outro lado, tem escopo de fun√ß√£o, o que pode levar a comportamentos inesperados, principalmente em fun√ß√µes aninhadas, sendo geralmente desaconselhado em favor de 'let' e 'const'. As vari√°veis podem armazenar diferentes tipos de dados, como n√∫meros, strings, objetos e arrays, e s√£o fundamentais para o controle de fluxos e manipula√ß√£o de informa√ß√µes dentro do c√≥digo." },
    { element: "Functions", description: "S√£o blocos de c√≥digo que podem ser reutilizados. Podem ser definidas de forma declarativa ou como express√µes. As fun√ß√µes podem receber par√¢metros, que s√£o valores passados para elas quando chamadas, e retornar um valor utilizando a palavra-chave return. Al√©m disso, as fun√ß√µes s√£o fundamentais para a organiza√ß√£o do c√≥digo, permitindo modulariza√ß√£o e encapsulamento de comportamentos, o que facilita a manuten√ß√£o e reutiliza√ß√£o do c√≥digo. Em JavaScript, tamb√©m podemos criar fun√ß√µes utilizando arrow functions, uma sintaxe mais concisa que mant√©m o contexto de this da fun√ß√£o onde foi definida." },
    { element: "Events", description: "Permitem que os usu√°rios interajam com a p√°gina. Exemplo: cliques de bot√£o. Os eventos s√£o disparados em resposta a a√ß√µes do usu√°rio, como cliques, movimentos do mouse, pressionamento de teclas ou at√© mesmo carregamento da p√°gina. Em JavaScript, os eventos podem ser manipulados usando 'event listeners', que s√£o fun√ß√µes associadas a um determinado evento. Por exemplo, ao clicar em um bot√£o, podemos associar um evento de clique que executa uma fun√ß√£o espec√≠fica. " },
    { element: "DOM Manipulation", description: "M√©todos que permitem modificar a estrutura e o estilo da p√°gina HTML usando JavaScript. O DOM (Document Object Model) √© uma interface que representa a estrutura da p√°gina como uma √°rvore de n√≥s, onde cada n√≥ √© um elemento HTML, atributo ou texto. A manipula√ß√£o do DOM envolve a√ß√µes como adicionar, remover ou modificar elementos e atributos da p√°gina. Usando m√©todos como getElementById, querySelector, createElement, appendChild e removeChild, √© poss√≠vel dinamicamente alterar a apar√™ncia e o conte√∫do de uma p√°gina." },
    { element: "Asynchronous JavaScript", description: "Permite executar c√≥digo de forma n√£o bloqueante, utilizando Promises, async/await e callbacks. O c√≥digo ass√≠ncrono permite que opera√ß√µes demoradas, como requisi√ß√µes a APIs ou leituras de arquivos, sejam executadas sem bloquear o fluxo principal da aplica√ß√£o. As Promises representam opera√ß√µes que podem ser conclu√≠das no futuro, e permitem encadear a√ß√µes a serem executadas quando a opera√ß√£o for finalizada (com .then() para sucesso ou .catch() para erro). A introdu√ß√£o de async/await torna o c√≥digo ass√≠ncrono mais leg√≠vel e semelhante ao c√≥digo s√≠ncrono, permitindo aguardar a resolu√ß√£o de uma Promise de maneira mais intuitiva." },
    { element: "Curiosidades", description: "1. Criado em 10 dias: JavaScript foi desenvolvido por Brendan Eich em apenas 10 dias! Inicialmente, era apenas um script para adicionar interatividade b√°sica nas p√°ginas. 2. √â brincalh√£o: Se voc√™ digitar typeof NaN no console do navegador, ver√° que o JavaScript dir√° que o 'N√£o √© um N√∫mero' (NaN) √©, na verdade, um n√∫mero!. 3. As mensagens ocultas no console: Muitos sites deixam mensagens secretas no console do navegador para desenvolvedores curiosos. Experimente abrir o console de sites como o Google e veja!" },
  ];

  const handleExpand = (element) => {
    setExpandedElement(element === expandedElement ? null : element);
  };

  return (
    <div className="javascript-container">
      <h1>Introdu√ß√£o ao JavaScript no Frontend üåê</h1>
      <p className="description">
        JavaScript √© uma linguagem de programa√ß√£o que permite criar interatividade em p√°ginas web. Com ela, voc√™ pode manipular o DOM, responder a eventos, e muito mais.
      </p>

      <h2>Elementos Importantes do JavaScript</h2>
      <p>Clique em cada elemento para expandir e aprender mais:</p>

      <div className="elements-container">
        {elements.map((item, index) => (
          <div 
            key={index} 
            className={`element ${expandedElement === item.element ? 'expanded' : ''}`}
            onClick={() => handleExpand(item.element)}
          >
            <span className="element-tag">{item.element}</span>
            {expandedElement === item.element && (
              <p className="element-description">{item.description}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}