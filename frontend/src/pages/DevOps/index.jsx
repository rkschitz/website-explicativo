import './styles.css';
import { useState } from 'react';

export default function DevOps() {
  const [expandedTag, setExpandedTag] = useState(null);

  const elements = [
    {
      tag: "Integra√ß√£o Cont√≠nua (CI)",
      description: `A Integra√ß√£o Cont√≠nua √© uma pr√°tica do DevOps onde os desenvolvedores enviam suas altera√ß√µes de c√≥digo frequentemente 
      para um reposit√≥rio compartilhado. A ideia √© automatizar testes para garantir que essas mudan√ßas n√£o causem problemas no projeto. 
      Assim, erros s√£o identificados rapidamente.`
    },
    {
      tag: " Entrega Cont√≠nua (CD)",
      description: `Entrega Cont√≠nua vai al√©m da integra√ß√£o cont√≠nua, automatizando o processo para que as mudan√ßas no c√≥digo 
      sejam facilmente preparadas e prontas para implanta√ß√£o em produ√ß√£o. O objetivo √© sempre manter o software em um estado funcional,
       pronto para entrega ou implanta√ß√£o.`
    },
    {
      tag: "Infraestrutura como C√≥digo (IaC)",
      description: `Infraestrutura como C√≥digo se refere ao uso de c√≥digo para gerenciar e provisionar a
      infraestrutura de TI (servidores, redes, armazenamento etc.), em vez de fazer isso manualmente.
       Ferramentas como Terraform, Ansible e AWS CloudFormation s√£o usadas para descrever e automatizar esses recursos.`
    },
    {
      tag: "Monitoramento e Observabilidade",
      description: `O Monitoramento e Observabilidade envolvem a coleta de dados, 
      m√©tricas e logs para analisar a sa√∫de e desempenho de aplica√ß√µes e infraestrutura.
       Ferramentas como Prometheus, Grafana, ELK Stack e Datadog ajudam equipes a identificar falhas, gargalos e problemas em tempo real.`
    },
    {
      tag: "Cont√™ineres e Orquestra√ß√£o com Docker e Kubernetes",
      description: `Os cont√™ineres (como os do Docker) permitem empacotar aplica√ß√µes e suas depend√™ncias em unidades isoladas
       e leves que podem ser executadas de forma consistente em qualquer ambiente. O Kubernetes √© a ferramenta l√≠der
        para orquestrar esses cont√™ineres, gerenciando sua escalabilidade, alta disponibilidade e resili√™ncia.`

    },
    {
      tag: "Curiosidades",
      description: `1. Origem do termo: O termo "DevOps" foi cunhado em 2009 por Patrick Debois e Andrew Shafer durante uma confer√™ncia em Ghent, B√©lgica.
      2. Camiseta preta: A camiseta preta √© um s√≠mbolo da cultura DevOps, representando a colabora√ß√£o entre equipes de desenvolvimento e opera√ß√µes.
      3. O primeiro conceito de CI/CD foi criado nos anos 2000! Embora o conceito moderno de DevOps tenha ganhado popularidade nos anos 2010, 
      a ideia de Integra√ß√£o Cont√≠nua e Entrega Cont√≠nua come√ßou a surgir no in√≠cio dos anos 2000 com pr√°ticas como "build automation". 
       Desde ent√£o, ferramentas como Jenkins e GitLab ajudaram a transformar esses conceitos.
 `
    }
  ];

  const handleExpand = (tag) => {
    setExpandedTag(tag === expandedTag ? null : tag);
  };

  return (
    <div className="html-container">
      <h1>Introdu√ß√£o a DevOps ü§ñ</h1>
      <p className="description">
        DevOps √© uma abordagem que integra pr√°ticas de Desenvolvimento (Dev) e Opera√ß√µes (Ops) com o objetivo de melhorar a
        colabora√ß√£o entre equipes, aumentar a efici√™ncia no desenvolvimento de software e garantir entregas mais r√°pidas e seguras.
      </p>

      <h2>Elementos Importantes de DevOps</h2>
      <p>Clique em cada elemento para expandir e aprender mais:</p>

      <div className="elements-container">
        {elements.map((element, index) => (
          <div
            key={index}
            className={`element ${expandedTag === element.tag ? 'expanded' : ''}`}
            onClick={() => handleExpand(element.tag)}
          >
            <span className="element-tag">{element.tag}</span>
            {expandedTag === element.tag && (
              <p className="element-description">{element.description}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}
